#  Type of rescaling of Grossâ€“Pitaevskii equation.
#  Possible values: 1 or 2.
#  Required: yes
#  Type: int
   OPTION = 2

#  Number of atoms in condensate.
#  Required: yes
#  Type: long
   NATOMS = 5000

#  Coefficient of the nonlinear term. If not defined, G0 is calculated as
#     G0 = 4 * Pi * AS * NATOMS * a0
#  where AS is contact interaction strength, NATOMS number of atoms in
#  condensate, and a0 Bohr radius.
#  Required: no
#  Type: double
#   G0 = 0.

#  Coefficient of the dipolar nonlinearity. If not defined, GDD0 is calculated
#  as
#     GDD0 = 3 * ADD * NATOMS * a0
#  where ADD is dipole-dipole interaction strength, NATOMS number of atoms in
#  condensate, and a0 Bohr radius.
#  Required: no
#  Type: double
#   GDD0 = 3.

#  Dipolar potential cut off.
#  Required: yes
#  Type: double
   CUTOFF = 10.

#  Unit of length (defined by a chosen referent frequency omega_ref). Required if G0 or GDD0 are not defined.
#  Required: conditionally
#  Type: double
   AHO = 1.e-6

#  Contact interaction strength in units of Bohr radius. Required if G0 is not
#  defined.
#  Required: conditionally
#  Type: double
   AS = 100.

#  Dipole-dipole interaction strength in units of Bohr radius. Required if
#  GDD0 is not defined.
#  Required: conditionally
#  Type: double
   ADD = 132.7

#  Number of discretization points in the x-direction.
#  Required: yes
#  Type: long
   NX = 128

#  Number of discretization points in the y-direction.
#  Required: yes
#  Type: long
   NY = 96

#  Number of discretization points in the z-direction.
#  Required: yes
#  Type: long
   NZ = 80

#  Spatial discretization step in the x-direction.
#  Required: yes
#  Type: double
   DX = 0.2

#  Spatial discretization step in the y-direction.
#  Required: yes
#  Type: double
   DY = 0.2

#  Spatial discretization step in the z-direction.
#  Required: yes
#  Type: double
   DZ = 0.2

#  Time discretization step.
#  Required: yes
#  Type: double
   DT = 0.005

#  Gamma coefficient of anisotropy of the trap (omega_x / omega_ref).
#  Required: yes
#  Type: double
   GAMMA = 0.5

#  Nu coefficient of anisotropy of the trap (omega_y / omega_ref).
#  Required: yes
#  Type: double
   NU = 1.

#  Lambda coefficient of anisotropy of the trap (omega_z / omega_ref).
#  Required: yes
#  Type: double
   LAMBDA = 1.5

#  Number of subsequent iterations to introduce the nonlinearity G and GD.
#  Required: yes
#  Type: long
   NSTP = 100

#  Number of subsequent iterations with fixed nonlinearities G and GD.
#  Required: yes
#  Type: long
   NPAS = 800

#  Number of final iterations with fixed nonlinearities G and GD.
#  Required: yes
#  Type: long
   NRUN = 100

#  Output file with the summary of final values of all physical quantities. If
#  not defined, standard output will be used.
#  Required: no
#  Type: string
   OUTPUT = imag3d-out

#  Output file with RMS values. The values are written after initialization,
#  subsequent NSTP, NPAS, and final NRUN iterations. If not defined,
#  the wave function will not be saved.
#  Required: no
#  Type: string
   RMSOUT = imag3d-rms

#  Output file with the initial wave function. Only 1D sections along
#  coordinate axes of the wave function are saved, which is designated by a
#  suffix x, y, or z. If not defined, the initial wave function will not be
#  saved.
#  Required: no
#  Type: string
#   INITOUT = imag3d-den-init

#  Output file with the wave function obtained after the subsequent NSTP
#  iterations, with the nonlinearity G0. Only 1D sections along
#  coordinate axes of the wave function are saved, which is designated by a
#  suffix x, y, or z. If not defined, the wave function will not be saved.
#  Required: no
#  Type: string
#   NSTPOUT = imag3d-den-nstp

#  Output file with the wave function obtained after the subsequent NPAS
#  iterations, with the fixed nonlinearity G0. Only 1D sections along
#  coordinate axes of the wave function are saved, which is designated by a
#  suffix x, y, or z. If not defined, the wave function will not be saved.
#  Required: no
#  Type: string
#   NPASOUT = imag3d-den-npas

#  Output file with the final wave function obtained after the final NRUN
#  iterations. Only 1D sections along coordinate axes of the wave function are
#  saved, which is designated by a suffix x, y, or z. If not defined, the wave
#  function will not be saved.
#  Required: no
#  Type: string
   NRUNOUT = imag3d-den

#  Discretization step in the x-direction used to save wave functions.
#  It's required if any of wave function outputs (INITOUT, NSTPOUT, NPASOUT,
#  NRUNOUT) is defined.
#  Required: conditionally
#  Type: long
   OUTSTPX = 1

#  Discretization step in the y-direction used to save wave functions. Required
#  if any of wave function output files (INITOUT, NSTPOUT, NPASOUT, NRUNOUT) is defined.
#  Required: conditionally
#  Type: long
   OUTSTPY = 1

#  Discretization step in the z-direction used to save wave functions. Required
#  if any of wave function output files (INITOUT, NSTPOUT, NPASOUT, NRUNOUT) is defined.
#  Required: conditionally
#  Type: long
   OUTSTPZ = 1


#  Number of per-node GPUs to use.
#  Required: yes
#  Type: int
   NGPU = 1

#  The following parameters control the offloading to GPU

#  Part of the time propagation step offloaded to GPU. If the value is 1, time
#  propagation w.r.t. H3 and H4 will be performed entirely on CPU, while the rest will
#  be performed simultaneously on CPU and GPU. If the value is 2, only time propagation
#  w.r.t. H4 will be performed entirely on CPU, while the rest will be performed
#  simultaneously on CPU and GPU. If the value is 3, entire time propagation step will
#  be performed on both CPU and GPU simultaneously.
#  Possible values: 1, 2 or 3.
#  Required: yes
#  Type: int
   OFFLOAD = 3

#  Portion of NX dimension offloaded to GPU during the calculation of the dipolar term.
#  The GPU will process GPUNX_FFT x NY x NZ elements of the discretized wave function.
#  Required: yes
#  Type: long
   GPUNX_FFT = 64

#  The number of streams GPUNX_FFT will be divided into, where
#  GPUNX_FFT % CHUNKSX_FFT = 0.
#  Required: yes
#  Type: int
   CHUNKSX_FFT = 4

#  Portion of NY dimension offloaded to GPU during the calculation of the dipolar term.
#  The GPU will process NX x GPUNY_FFT x NZ elements of the discretized wave function.
#  Required: yes
#  Type: long
   GPUNY_FFT = 32

#  The number of streams GPUNY_FFT will be divided into, where
#  GPUNY_FFT % CHUNKSY_FFT = 0.
#  Required: yes
#  Type: int
   CHUNKSY_FFT = 4

#  Portion of NX dimension offloaded to GPU during the second part of the calculation
#  of the dipolar term and subsequent time propagation w.r.t. H1. The GPU will process
#  GPUNX_NYZ x NY x NZ elements of the discretized wave function.
#  Required: yes
#  Type: long
   GPUNX_NYZ = 48

#  The number of streams GPUNX_NYZ will be divided into, where
#  GPUNX_NYZ % CHUNKSX_NYZ = 0.
#  Required: yes
#  Type: int
   CHUNKSX_NYZ = 2

#  Portion of NY dimension offloaded to GPU during time propagation w.r.t. H2. The GPU
#  will process NX x GPUNY_LUX x NZ elements of the discretized wave function.
#  Required: yes
#  Type: long
   GPUNY_LUX = 80

#  The number of streams GPUNY_LUX will be divided into, where
#  GPUNY_LUX % CHUNKSY_LUX = 0.
#  Required: yes
#  Type: int
   CHUNKSY_LUX = 4

#  Block size of CUDA kernels. For 2D kernels two numbers must be provided in form of
#  "x,y", while for 3D kernels three numbers must be provided in form of "x,y,z".
#  Type: comma-separated list of ints
   BLOCK3D_DD2 = 8,8,8
   BLOCK2D_DD2 = 16,16
   BLOCK2D_LUY = 16,16
   BLOCK2D_LUZ = 16,16
   BLOCK3D_NU = 8,8,8
   BLOCK2D_LUX = 16,16
   BLOCK3D_POTDD = 8,8,8

#  Grid size of CUDA kernels. This number is multiplied by the number of streaming
#  processors. For example, kernel in time propagation step w.r.t. H2 will be launched
#  with "<<<number of streaming processors * GRID2D_NU, BLOCK2D_LUX>>>"
#  Required: yes
#  Type: int
   GRID3D_DD2 = 1
   GRID2D_DD2 = 1
   GRID2D_LUY = 1
   GRID2D_LUZ = 1
   GRID3D_NU = 1
   GRID2D_LUX = 1
   GRID3D_POTDD = 1
